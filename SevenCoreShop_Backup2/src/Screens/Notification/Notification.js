import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
} from 'react-native';
import axios from 'axios';
import API__URL from '../../../config';
import Customheader from '../../CustomHeader/Customheader';
const NotificationScreen = () => {
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const response = await axios.get(`${API__URL}/Notification/`);
        if (response.data && response.data.data) {
          const ArrayNoti = response.data.data; // Truy c·∫≠p ƒë√∫ng tr∆∞·ªùng `data`
          setNotifications(ArrayNoti); // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu
        } else {
          console.error('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.');
          setNotifications([]); // G√°n m·∫£ng tr·ªëng n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        }
      } catch (error) {
        console.error('Error fetching notifications:', error);
        setError('L·ªói t·∫£i th√¥ng b√°o, vui l√≤ng th·ª≠ l·∫°i.');
      } finally {
        setLoading(false);
      }
    };

    fetchNotifications();
  }, []);

  const renderNotificationItem = ({item}) => {
    return (
      <View style={styles.notificationItem}>
        <Text style={styles.icon}>{item.icon || 'üîî'}</Text>
        <View style={styles.textContainer}>
          <Text style={styles.title}>{item.title}</Text>
          <Text style={styles.description}>{item.description}</Text>
        </View>
      </View>
    );
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#000" />
        <Text>ƒêang t·∫£i d·ªØ li·ªáu...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  if (!Array.isArray(notifications) || notifications.length === 0) {
    return (
      <View style={styles.emptyContainer}>
        <Text>Kh√¥ng c√≥ th√¥ng b√°o n√†o!</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View>
        <Customheader title="Th√¥ng b√°o" />
      </View>
      <FlatList
        data={notifications || []} // ƒê·∫£m b·∫£o data l√† m·ªôt m·∫£ng (tr√°nh l·ªói khi notifications undefined)
        keyExtractor={item => item._id} // S·ª≠ d·ª•ng `_id` l√†m key
        renderItem={renderNotificationItem}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  list: {
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  notificationItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  icon: {
    fontSize: 32,
    marginRight: 16,
  },
  textContainer: {
    flex: 1,
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  description: {
    fontSize: 14,
    color: '#666',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorText: {
    color: 'red',
    fontSize: 16,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default NotificationScreen;
